---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Launch templates nested stack.

Parameters:
  KeyPair:
    Type: String
  SecurityGroupJenkins:
    Type: String
  InstanceProfileECS:
    Type: String
  EFSJenkinsHomeVolume:
    Type: String
  IAMRoleAMILookupLambdaExecution:
    Type: String
  InstanceProfileJenkins:
    Type: String
  SubnetPublicA:
    Type: String
  SubnetPublicB:
    Type: String
  SubnetPublicC:
    Type: String

Resources:
  AMILookupLambdaFunction: # A Lambda function that will be used to look up the AMI for the latest Amazon Linux AMI. The source code for this Lambda function can be obtained at https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html.
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub amazon-ec2-spot-cicd-workshop-${AWS::Region}
        S3Key: amilookup.zip
      Handler: amilookup.handler
      Role: !Ref IAMRoleAMILookupLambdaExecution
      Runtime: nodejs8.10
      Timeout: 30

  EC2AMILookupCustomResource: # A custom resource that provides the latest Amazon Linux AMI via EC2AMILookupCustomResource.Id
    Type: Custom::AMILookup
    Properties:
      Architecture: HVM64
      Region: !Ref AWS::Region
      ServiceToken: !GetAtt AMILookupLambdaFunction.Arn

  ECSAMILookupCustomResource: # A custom resource that provides the latest Amazon ECS-Optimized AMI via ECSAMILookupCustomResource.Id
    Type: Custom::AMILookup
    Properties:
      Architecture: ECSHVM64
      Region: !Ref AWS::Region
      ServiceToken: !GetAtt AMILookupLambdaFunction.Arn

  JenkinsSpotAgentLaunchTemplate: # This is a launch template that will be used to provision Jenkins build agents - showing how spot instances can be used to scale-out build jobs at low cost.
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: JenkinsBuildAgentLaunchTemplate
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: 8
            VolumeType: gp2
        IamInstanceProfile:
          #Arn: !GetAtt InstanceProfileJenkins.Arn
          Name: !Ref InstanceProfileJenkins
        ImageId: !GetAtt EC2AMILookupCustomResource.Id
        InstanceType: t3.small
        KeyName: !Ref KeyPair
        SecurityGroupIds:
        - !Ref SecurityGroupJenkins
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: Jenkins Build Agent
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Install all pending updates to the system
            yum -y update
            # Configure YUM to be able to access contributed Maven RPM packages
            wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
            # Update the release version in the Maven repository configuration for this mainline release of Amazon Linux
            sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
            # Install the Java 8 SDK, Git and Maven
            yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel git apache-maven
            # Set the default version of java to run out of the Java 8 SDK path (required by Jenkins)
            update-alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java
            update-alternatives --set javac /usr/lib/jvm/java-1.8.0-openjdk.x86_64/bin/javac

  ECSLaunchTemplate: # This is a launch template that will be used to provision ECS cluster nodes
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: ECSLaunchTemplate
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: 8
            VolumeType: gp2
        IamInstanceProfile:
          Name: !Ref InstanceProfileECS
        ImageId: !GetAtt ECSAMILookupCustomResource.Id
        InstanceType: t3.medium
        KeyName: !Ref KeyPair
        SecurityGroupIds:
        - !Ref SecurityGroupJenkins
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: ECS Cluster Instance
        UserData:
          Fn::Base64: !Sub |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0
            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/usr/bin/env bash
            # Install awslogs and the jq JSON parser
            yum install -y awslogs jq
            # Inject the CloudWatch Logs configuration file contents
            cat > /etc/awslogs/awslogs.conf <<- EOF
            [general]
            state_file = /var/lib/awslogs/agent-state

            [/var/log/dmesg]
            file = /var/log/dmesg
            log_group_name = /var/log/dmesg
            log_stream_name = {cluster}/{container_instance_id}

            [/var/log/messages]
            file = /var/log/messages
            log_group_name = /var/log/messages
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %b %d %H:%M:%S

            [/var/log/docker]
            file = /var/log/docker
            log_group_name = /var/log/docker
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %Y-%m-%dT%H:%M:%S.%f

            [/var/log/ecs/ecs-init.log]
            file = /var/log/ecs/ecs-init.log
            log_group_name = /var/log/ecs/ecs-init.log
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %Y-%m-%dT%H:%M:%SZ

            [/var/log/ecs/ecs-agent.log]
            file = /var/log/ecs/ecs-agent.log.*
            log_group_name = /var/log/ecs/ecs-agent.log
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %Y-%m-%dT%H:%M:%SZ

            [/var/log/ecs/audit.log]
            file = /var/log/ecs/audit.log.*
            log_group_name = /var/log/ecs/audit.log
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %Y-%m-%dT%H:%M:%SZ

            EOF

            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/usr/bin/env bash
            # Set the region to send CloudWatch Logs data to (the region where the container instance is located)
            region=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
            sed -i -e "s/region = us-east-1/region = $region/g" /etc/awslogs/awscli.conf

            --==BOUNDARY==
            Content-Type: text/upstart-job; charset="us-ascii"

            #upstart-job
            description "Configure and start CloudWatch Logs agent on Amazon ECS container instance"
            author "Amazon Web Services"
            start on started ecs

            script
            	exec 2>>/var/log/ecs/cloudwatch-logs-start.log
            	set -x

            	until curl -s http://localhost:51678/v1/metadata
            	do
            		sleep 1
            	done

            	# Grab the cluster and container instance ARN from instance metadata
            	cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')
            	container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )

            	# Replace the cluster name and container instance ID placeholders with the actual values
            	sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf
            	sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf

            	service awslogs start
            	chkconfig awslogs on
            end script
            --==BOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/usr/bin/env bash
            # Register instance with ECS cluster
            echo ECS_CLUSTER=MW-MGM-ECSCluster >> /etc/ecs/ecs.config
            # Install all pending updates to the system
            yum -y update
            # Install the needed packages
            yum -y install nfs-utils unzip wget jq awslogs
            # Create EFS mountpoint
            mkdir /mnt/efs
            mkdir /mnt/efs/jenkins_home
            # Mount the Jenkins EFS volume
            mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).${EFSJenkinsHomeVolume}.efs.eu-west-1.amazonaws.com:/ /mnt/efs/jenkins_home
            # Set Jenkins Permissions
            chown -R 1000:1000 /mnt/efs/jenkins_home
            # Deploy the AWS CLI
            wget -q https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -O ./awscli-bundle.zip
            unzip ./awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            # Setup awslogs

            # Register a custom attribute for this ECS host to indicate if this is a spot instance or not
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            INSTANCE_LIFECYCLE=$(/usr/local/bin/aws ec2 describe-instances --region eu-west-1 --instance-ids $INSTANCE_ID | jq .Reservations | jq .[0] | jq .Instances | jq .[0] | jq .InstanceLifecycle | tr -d \")
            echo ECS_INSTANCE_ATTRIBUTES={\"lifecycle\": \"$INSTANCE_LIFECYCLE\"} >> /etc/ecs/ecs.config
            # If this is a spot instance, ensure that container draining occurs prior to interruption
            if [ $INSTANCE_LIFECYCLE == spot ]
              then
                wget -q https://s3-us-west-2.amazonaws.com/amazon-ec2-spot-cicd-workshop/interruption_check.sh -O ./interruption_check.sh
                chmod +x ./interruption_check.sh
                nohup ./interruption_check.sh &>/dev/null &
            fi
            --==BOUNDARY==--

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckGracePeriod: 300
      MinSize: "2"
      MaxSize: "2"
      DesiredCapacity: "2"
      MixedInstancesPolicy:
        InstancesDistribution:
          SpotAllocationStrategy: capacity-optimized
          OnDemandPercentageAboveBaseCapacity: 0
          OnDemandBaseCapacity: 1
        LaunchTemplate:
          Overrides:
            - InstanceType: t3a.large
            - InstanceType: t3.medium
            - InstanceType: t2.medium
            - InstanceType: t2.large
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref ECSLaunchTemplate
            Version: 1
      Tags:
        - Key: Name
          Value: JENKINS-MW-MGM ECS AutoScaling
          PropagateAtLaunch: "true"
      VPCZoneIdentifier:
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
        - !Ref SubnetPublicC